import ReactDOM from "react-dom/client"
import { BrowserRouter } from "react-router-dom"
import { Provider } from "react-redux"
import { App } from "./components/App/App"
import { state } from "./services/store"
import "./index.css"

const root = ReactDOM.createRoot(
   document.getElementById("root") as HTMLElement
)

root.render(
   <BrowserRouter>
      <Provider store={state}>
         <App />
      </Provider>
   </BrowserRouter>
)


//Чтобы подключиться к бэкенду для получения всех заказов, используйте
// URL wss://norma.nomoreparties.space/orders/all.
// При подключении бэкенд приложения вернёт
// максимум 50 последних заказов, которые сортируются по времени обновления.

//Чтобы получить заказы конкретного пользователя, используйте
// URL wss://norma.nomoreparties.space/orders. При успешном подключении бэкенд
// вернёт максимум 50 последних заказов пользователя, которые сортируются по времени обновления.


/*
5. Сокет-соединение с авторизацией
Для подключения к URL norma.nomoreparties.space/orders потребуется
предоставить серверу accessToken. Добавляйте токен при подключении к
URL в query-параметр: ?token=${accessToken}. Только так сервер сможет
опознавать пользователя и отдавать персональную ленту заказов.
Для обращения по сокет-соединению используйте только токен, без Bearer.
При создании заказа POST на эндпоинт
[norma.nomoreparties.space/api/orders](http://norma.nomoreparties.space/api/orders)
(с переданным токеном пользователя) будет присутствовать задержка в 15 секунд.
Это необходимо для эмулирования приготовления заказа, обновлённый статус которого
можно получить по сокет-соединению. Поле status у заказа может иметь значения created, pending, done.
В заключении поговорим об особенностях реализации
*/

/*
6. Особенности реализации
Когда пользователи начнут создавать заказы, в уже активное сокет-соединение
будут приходить не только новый добавленный заказ, но и весь список уже существующих заказов.
Ваша задача — актуализировать всю ленту заказов при каждом обновлении списка заказов на сервере.
Мы понимаем, что это достаточно дорогостоящее и неоптимальное решение. Но одновременно
оно и максимально простое, ведь синхронизация ленты заказов при появлении новых заказов
— более сложное задание, которое занимает много времени.
Из темы WS и Redux вы узнаете о том, как организовать код в концепции React-Redux.
Этого достаточно для того, чтобы реализовать переиспользуемый мидлвар, который сможет
работать с разными сокет-соединениями. А ещё с помощью этих знаний вы легко создадите
редьюсер. Только не забывайте, что с сервера будет приходить не объект, а строка JSON.
*/